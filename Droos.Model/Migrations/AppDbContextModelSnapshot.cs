// <auto-generated />
using System;
using Droos.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Droos.Model.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Droos.Model.UserIdentitiy.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Droos.Model.UserIdentitiy.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Droos.Models.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AnswerTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("AnswerId");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionTemplateId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Droos.Models.AnswersTemplate", b =>
                {
                    b.Property<Guid>("AnswerTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("QuestionTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnswerTemplateId");

                    b.HasIndex("QuestionTemplateId");

                    b.ToTable("AnswersTemplate", (string)null);
                });

            modelBuilder.Entity("Droos.Models.Chapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ChapterId")
                        .HasName("PK_Chapter");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Droos.Models.ChapterContent", b =>
                {
                    b.Property<Guid>("ChapterContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChapterContentId")
                        .HasName("PK_ChapterContent");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContentId");

                    b.ToTable("ChapterContents");
                });

            modelBuilder.Entity("Droos.Models.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DurationInSeconds")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HtmlText")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("McqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("URL")
                        .IsFixedLength();

                    b.HasKey("ContentId")
                        .HasName("PK_Content");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Droos.Models.EducationSystem", b =>
                {
                    b.Property<Guid>("EducationSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("EducationSystemId")
                        .HasName("PK_EducationSystem_1");

                    b.ToTable("EducationSystems");
                });

            modelBuilder.Entity("Droos.Models.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ExamTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Result")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamId");

                    b.HasIndex("ExamTemplateId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("Droos.Models.ExamTemplate", b =>
                {
                    b.Property<Guid>("ExamTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExamTemplateId");

                    b.ToTable("ExamTemplate", (string)null);
                });

            modelBuilder.Entity("Droos.Models.Governorate", b =>
                {
                    b.Property<Guid>("GovernorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GovernorateId")
                        .HasName("PK_Governorate");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("Droos.Models.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("EducationSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GradeId");

                    b.HasIndex("EducationSystemId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Droos.Models.PayableItem", b =>
                {
                    b.Property<Guid>("PayableItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PayableItemType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ValidFor")
                        .HasColumnType("int");

                    b.HasKey("PayableItemId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContentId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PayableItem", (string)null);
                });

            modelBuilder.Entity("Droos.Models.QuestionTemplate", b =>
                {
                    b.Property<Guid>("QuestionTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ExamTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("QuestionTemplateId");

                    b.HasIndex("ExamTemplateId");

                    b.ToTable("QuestionTemplate", (string)null);
                });

            modelBuilder.Entity("Droos.Models.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId")
                        .HasName("PK_Riview");

                    b.HasIndex("ItemId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Droos.Models.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Droos.Models.SectionChapter", b =>
                {
                    b.Property<Guid>("SectionChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionChapterId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionChapters");
                });

            modelBuilder.Entity("Droos.Models.SectionContent", b =>
                {
                    b.Property<Guid>("SectionContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionContentId")
                        .HasName("PK_SectionContent");

                    b.ToTable("SectionContents");
                });

            modelBuilder.Entity("Droos.Models.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubjectId");

                    b.HasIndex("GradeId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Droos.Models.SubjectSection", b =>
                {
                    b.Property<Guid>("SubjectSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectSectionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectSections");
                });

            modelBuilder.Entity("Droos.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("PayableItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PaymentConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PaymentConfirmedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionOwner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SubscriptionType")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("PayableItemId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Droos.Models.Answer", b =>
                {
                    b.HasOne("Droos.Models.Exam", "Exam")
                        .WithMany("Answers")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_Answer_Exam");

                    b.HasOne("Droos.Models.QuestionTemplate", "QuestionTemplate")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_Answer_QuestionTemplate");

                    b.Navigation("Exam");

                    b.Navigation("QuestionTemplate");
                });

            modelBuilder.Entity("Droos.Models.AnswersTemplate", b =>
                {
                    b.HasOne("Droos.Models.QuestionTemplate", "QuestionTemplate")
                        .WithMany("AnswersTemplates")
                        .HasForeignKey("QuestionTemplateId")
                        .HasConstraintName("FK_AnswersTemplate_QuestionTemplate");

                    b.Navigation("QuestionTemplate");
                });

            modelBuilder.Entity("Droos.Models.ChapterContent", b =>
                {
                    b.HasOne("Droos.Models.Chapter", "Chapter")
                        .WithMany("ChapterContents")
                        .HasForeignKey("ChapterId")
                        .IsRequired()
                        .HasConstraintName("FK_ChapterContent_Chapter");

                    b.HasOne("Droos.Models.Content", "Content")
                        .WithMany("ChapterContents")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("FK_ChapterContent_Content");

                    b.Navigation("Chapter");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Droos.Models.Exam", b =>
                {
                    b.HasOne("Droos.Models.ExamTemplate", "ExamTemplate")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTemplateId")
                        .HasConstraintName("FK_Exam_ExamTemplate");

                    b.Navigation("ExamTemplate");
                });

            modelBuilder.Entity("Droos.Models.Grade", b =>
                {
                    b.HasOne("Droos.Models.EducationSystem", "EducationSystem")
                        .WithMany("Grades")
                        .HasForeignKey("EducationSystemId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_EducationSystem");

                    b.HasOne("Droos.Models.Governorate", "Governorate")
                        .WithMany("Grades")
                        .HasForeignKey("GovernorateId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Governorate");

                    b.Navigation("EducationSystem");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Droos.Models.PayableItem", b =>
                {
                    b.HasOne("Droos.Models.Chapter", "Chapter")
                        .WithMany("PayableItems")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK_PayableItem_Chapters");

                    b.HasOne("Droos.Models.Content", "Content")
                        .WithMany("PayableItems")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK_PayableItem_Contents");

                    b.HasOne("Droos.Models.Section", "Section")
                        .WithMany("PayableItems")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_PayableItem_Sections");

                    b.HasOne("Droos.Models.Subject", "Subject")
                        .WithMany("PayableItems")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_PayableItem_Subjects");

                    b.Navigation("Chapter");

                    b.Navigation("Content");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Droos.Models.QuestionTemplate", b =>
                {
                    b.HasOne("Droos.Models.ExamTemplate", "ExamTemplate")
                        .WithMany("QuestionTemplates")
                        .HasForeignKey("ExamTemplateId")
                        .HasConstraintName("FK_QuestionTemplate_ExamTemplate");

                    b.Navigation("ExamTemplate");
                });

            modelBuilder.Entity("Droos.Models.Review", b =>
                {
                    b.HasOne("Droos.Models.Content", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Review_Contents");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Droos.Models.SectionChapter", b =>
                {
                    b.HasOne("Droos.Models.Chapter", "Chapter")
                        .WithMany("SectionChapters")
                        .HasForeignKey("ChapterId")
                        .IsRequired()
                        .HasConstraintName("FK_SectionChapters_Chapters");

                    b.HasOne("Droos.Models.Section", "Section")
                        .WithMany("SectionChapters")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_SectionChapters_Sections");

                    b.Navigation("Chapter");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Droos.Models.Subject", b =>
                {
                    b.HasOne("Droos.Models.Grade", "Grade")
                        .WithMany("Subjects")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Subject_Grade");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Droos.Models.SubjectSection", b =>
                {
                    b.HasOne("Droos.Models.Section", "Section")
                        .WithMany("SubjectSections")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectSections_Sections");

                    b.HasOne("Droos.Models.Subject", "Subject")
                        .WithMany("SubjectSections")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectSections_Subject");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Droos.Models.Subscription", b =>
                {
                    b.HasOne("Droos.Models.PayableItem", "PayableItem")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PayableItemId")
                        .HasConstraintName("FK_Subscriptions_PayableItem");

                    b.Navigation("PayableItem");
                });

            modelBuilder.Entity("Droos.Models.Chapter", b =>
                {
                    b.Navigation("ChapterContents");

                    b.Navigation("PayableItems");

                    b.Navigation("SectionChapters");
                });

            modelBuilder.Entity("Droos.Models.Content", b =>
                {
                    b.Navigation("ChapterContents");

                    b.Navigation("PayableItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Droos.Models.EducationSystem", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Droos.Models.Exam", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Droos.Models.ExamTemplate", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("QuestionTemplates");
                });

            modelBuilder.Entity("Droos.Models.Governorate", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Droos.Models.Grade", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Droos.Models.PayableItem", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Droos.Models.QuestionTemplate", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("AnswersTemplates");
                });

            modelBuilder.Entity("Droos.Models.Section", b =>
                {
                    b.Navigation("PayableItems");

                    b.Navigation("SectionChapters");

                    b.Navigation("SubjectSections");
                });

            modelBuilder.Entity("Droos.Models.Subject", b =>
                {
                    b.Navigation("PayableItems");

                    b.Navigation("SubjectSections");
                });
#pragma warning restore 612, 618
        }
    }
}
